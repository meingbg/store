#!/bin/bash

function list-dir {
init-repo
cat "$list"|grep -E "$1"
}

function init-repo {
mkdir -p "$repo"/tmp
touch "$list"
}

function hashsum {
sha1sum|sed -r 's/^([^ ]*).*$/\1/'
}

function save-dir {
init-repo
statfile="`tmpfile`"
statfile2="`tmpfile`"
dirname="`basename "$1"`"
dirhash="`dir-to-repo "$1" 2> "$statfile" | content-to-hash 2>"$statfile2"`"
date="`date +%Y%m%d%H%M`"
cat "$statfile2" >> "$statfile"
commithash_sd="`(echo d$date;echo c$dirhash;create-commit-stat "$statfile"|sed -r 's/^/s/')|content-to-hash 2>/dev/null`"
saveline="${dirname}_${date}_$commithash_sd"
if [ "`grep -Fc "$saveline" "$list"`" -eq "0" ]
then echo "$saveline" >> "$list"
fi
rm "$statfile" "$statfile2"
echo ""
get-commit-stat "$saveline"
echo ""
return
}

function get-commit-stat {
init-repo
commit="`select-commit "$1"`"
if [ "${commit}" == "" ]; then return; fi
commithash_gcs="`echo "$commit"|sed -r 's/^.*_([^_]*)$/\1/'`"
echo "Snapshot name: $commit"
hash-to-content "$commithash_gcs"|sed -r 's/^d/Date saved: /;s/^c/Directory hash: /;s/^s//'
}

function intsum {
cat|sed -r 's/^[^0-9]*([0-9]+)[^0-9]*$/\1+/'|(echo 0;cat;echo p)|dc
}

function create-commit-stat {
cat <<EOF
Bytes: `cat "$1"|grep -F -- --bytes-a|intsum`
Files: `cat "$1"|grep -F -- --files|intsum`
Directories: `cat "$1"|grep -F -- --directories|intsum`
Symlinks: `cat "$1"|grep -F -- --symlinks|intsum`
Nodes: `cat "$1"|grep -F -- --nodes|intsum`
Bytes after deduplication: `cat "$1"|grep -F -- --bytes-d|intsum`
Bytes after compression: `cat "$1"|grep -F -- --bytes-c|intsum`
EOF
}

function dir-to-repo {
dn="`dir-wo-slash "$1"`"
rpat="`echo "$dn"|sed -r 's/\/[^\/]+$/\//;s/^[^\/]*$//;s/./\./g'`"
dnpref="`echo "$dn"|sed -r 's/^('"$rpat"').*$/\1/'`"
uses=""
if [ "$use_perms" ]; then uses="$uses"'p\2\t';fi
if [ "$use_owner" ]; then uses="$uses"'o\3\t';fi
if [ "$use_group" ]; then uses="$uses"'g\4\t';fi
if [ "$use_mtime" ]; then uses="$uses"'m\6\t';fi
ls -lAR --full-time "$dn"|
(gfnd=yes;while IFS="" read a; do
  if [ ! "$a" ]; then gfnd=yes
elif [ "$gfnd" -a "`echo "$a"|grep -Ec ':$'`" -gt 0 ]; then lpath="`echo "$a"|sed -r 's/:$//'`"
elif [ "$gfnd" -a "`echo "$a"|grep -Ec '^total '`" -gt 0 ]; then gfnd=""
else echo -n "$a";echo -ne "\t";echo "$lpath";fi
done)|
(echo -n "`ls -ld --full-time "$dn"`";echo -e "\t//";cat)|
sed -r 's/^(.)(.........)\ +[0-9]+\ +([^ ]+)\ +([^ ]+)\ +([0-9]+)\ +([0-9-]+\ [0-9:.]+\ [0-9+-]+)\ ([^\t]+)\t'"$rpat"'(.*)$/\1\t'"$uses"'s\5\tn\8\/\7/;s/\tn\/\/\//\tn/'|
(while IFS="" read a; do
nodetype="`echo "$a"|sed -r 's/^(.)(.*\t)n([^\t]+)$/\1/'`"
nodeinfo="`echo "$a"|sed -r 's/^(.)(.*\t)n([^\t]+)$/\2/'`"
nodepath="`echo "$a"|sed -r 's/^(.)(.*\t)n([^\t]+)$/\3/'`"
echo -n "$nodetype$nodeinfo"
if [ "$use_atime" ]; then echo -ne "a`ls -ldu --full-time "$nodepath"|sed -r 's/^[^ ]+\ +[0-9]+\ +[^ ]+\ +[^ ]+\ +[0-9]+\ +([0-9-]+\ [0-9:.]+\ [0-9+-]+)\ .*$/\1/'`\t";fi
if [ "$nodetype" == "-" ]; then echo -ne "h`file-content-to-hash "$dnpref$nodepath"`\t";fi
#if [ ! "$nodetype" == "d" ]; then
echo "--bytes-a `echo "$nodeinfo"|sed -r 's/^.*\ts([0-9]+)\t.*$/\1/'`" >&2
#fi
echo "`echo "$nodetype"|sed -r 's/^-$/--files/;s/^d$/--directories/;s/^l$/--symlinks/'`" 1 >&2
echo "n$nodepath"
done)
}

function file-content-to-hash {
fcth="`cat "$1"|hashsum`"
if [ "`hash-to-filename "$fcth"`" ]; then echo "$fcth"; else cat "$1"|content-to-hash;fi
}

function dir-wo-slash {
echo "$1"|sed -r 's/\/$//'
}

function file-size {
ls -ld "$1"|sed -r 's/^[^ ]+\ +[0-9]+\ +[^ ]+\ +[^ ]+\ +([0-9]+)\ .*$/\1/'
}

function content-to-hash {
tf_cth="`tmpfile`"; tfgz="`tmpfile`"
h="`cat|tee "$tf_cth"|hashsum`"
h1="`echo "$h"|sed -r 's/^(..).*$/\1/'`"
h2="`echo "$h"|sed -r 's/^..//'`"
if [ -f "$repo"/$h1/$h2 -o -f "$repo"/$h1/$h2.gz ];
then rm "$tf_cth"; rm "$tfgz"
else mkdir -p "$repo"/$h1
cat "$tf_cth"|gzip>"$tfgz"
echo --nodes 1 >&2
echo --bytes-d "`file-size "$tf_cth"`" >&2
if [ "`file-size "$tfgz"`" -lt "`file-size "$tf_cth"`" ]
then echo --bytes-c "`file-size "$tfgz"`" >&2; mv "$tfgz" "$repo"/$h1/$h2.gz;rm "$tf_cth"
else echo --bytes-c "`file-size "$tf_cth"`" >&2; mv "$tf_cth" "$repo"/$h1/$h2;rm "$tfgz"
fi
fi
echo "$h1$h2"
}

function select-commit {
if [ "`cat "$list"|grep -Fc "$1"`" -gt "1" ];
then echor "More than one snapshot matches:" >&2
cat "$list"|grep -F "$1" 1>&2
return
fi
if [ "`cat "$list"|grep -Fc "$1"`" -eq "0" ];
then echor "No directory matches." >&2
return
fi
cat "$list"|grep -F "$1"
}

function load-dir {
init-repo
commithash_ld="`select-commit "$1"|sed -r 's/^.*_([^_]*)$/\1/'`"
if [ "${commithash_ld}" == "" ]; then exit; fi
dirhash="`hash-to-content "$commithash_ld"|grep -E '^c'|sed -r 's/^.//'`"
tf_dfr="`tmpfile`"
to_dir="`dir-wo-slash "$2"`"
hash-to-content "$dirhash" |
while IFS="" read a; do
nodetype="`echo "$a"|sed -r 's/^(.).*$/\1/'`"
nodeinfo="`echo "$a"|sed -r 's/^.\t(.*)$/\1/;s/\t/\n/g'`"
name="$2"/"`echo "$nodeinfo"|grep -E '^n'|sed -r 's/^.//'`"
  if [ "$nodetype" == "d" ]; then
mkdir "$name"
elif [ "$nodetype" == "-" ]; then
hash-to-content "`echo "$nodeinfo"|grep -E '^h'|sed -r 's/^.//'`" > "$name"
elif [ "$nodetype" == "l" ]; then
link="`echo "$name"|sed -r 's/^.* => //'`"
name="`echo "$name"|sed -r 's/ => .*$//'`"
ln -s "$link" "$name"
fi
echo "$nodeinfo"|grep -E "^[pogma]"|
if [ "$nodetype" == "d" ]; then (cat;echo n"$name") >> "$tf_dfr"; else settings-to-file "$name";fi
done
tac "$tf_dfr"|while IFS="" read a; do
tffl="`echo "$a"|sed -r 's/^(.).*$/\1/'`"
tfre="`echo "$a"|sed -r 's/^.//'`"
if [ "$tffl" == "n" ]; then name="$tfre"; else echo "$a"|settings-to-file "$name";fi
done
rm "$tf_dfr"
}

function hash-to-content {
h1="`echo "$1"|sed -r 's/^(..).*$/\1/'`"
h2="`echo "$1"|sed -r 's/^..([^ ]*).*$/\1/'`"
if [ -f "$repo"/$h1/$h2.cat ]
then cat "$repo"/$h1/$h2.cat|
(while IFS="" read a_htc; do hash-to-content "$a_htc" ;done)
else
if [ -f "$repo"/$h1/$h2.gz ]
then cat "$repo"/$h1/$h2.gz|gunzip
else
if [ -f "$repo"/$h1/$h2 ]
then cat "$repo"/$h1/$h2
fi
fi
fi
}

function settings-to-file {
while IFS="" read a; do
attribute="`echo "$a"|sed -r 's/^(.).*$/\1/'`"
value="`echo "$a"|sed -r 's/^.//'`"
if [ "$use_owner" -a "$attribute" == "o" ]; then chown -h "$value" "$1"; fi
if [ "$use_group" -a "$attribute" == "g" ]; then chgrp -h "$value" "$1"; fi
#no support for symlink modification/access times or permissions.
if [ ! -h "$1" ]; then
if [ "$use_mtime" -a "$attribute" == "m" ]; then touch -md "$value" "$1"; fi
if [ "$use_atime" -a "$attribute" == "a" ]; then touch -ad "$value" "$1"; fi
if [ "$use_perms" -a "$attribute" == "p" ]; then perm-to-file "$value" "$1"; fi
fi
done
}

function perm-to-file {
chmod "`echo "$1"|sed -r 's/--x/1/g;s/-w-/2/g;s/-wx/3/g;s/r--/4/g;s/r-x/5/g;s/rw-/6/g;s/rwx/7/g;s/---/0/g;'`" "$2"
}

function tmpfile {
tempfile -d "$repo"/tmp
}

function echor {
echo -ne '\e[31m'
echo "$@"
echo -ne '\e[0m'
}

function echog {
echo -ne '\e[32m'
echo "$@"
echo -ne '\e[0m'
}

function hash-to-filename {
h1="`echo "$1"|sed -r 's/^(..).*$/\1/'`"
h2="`echo "$1"|sed -r 's/^..([^ ]*).*$/\1/'`"
if [ -f "$repo"/$h1/$h2.cat ]
then echo "$repo"/$h1/$h2.cat
else
if [ -f "$repo"/$h1/$h2.gz ]
then echo "$repo"/$h1/$h2.gz
else
if [ -f "$repo"/$h1/$h2 ]
then echo "$repo"/$h1/$h2
fi
fi
fi
}

function nodes-existing {
ls -1A "$repo"|grep -E '^[0-9a-f]{2}$'|(while IFS="" read a; do ls -1A "$repo/$a"|sed -r 's/^/'"$a"'/';done)|sed -r 's/\.gz$//;s/\.cat$//'|grep -Ev '\.delete$'|sort
}

function files-existing {
ls -1A "$repo"|grep -E '^[0-9a-f]{2}$'|(while IFS="" read a; do ls -1A "$repo/$a"|(while IFS="" read b; do echo "$repo/$a/$b"; done);done)|sort
}

function all-nodes-referenced {
#fixme: include .cat content
cat "$list"|
sed -r 's/^.*_([0-9a-f]+)$/\1/'|
(while read a; do
echo $a
dirhash="`hash-to-content "$a"|grep -E '^c'|sed -r 's/^.//'`"
echo $dirhash
hash-to-content "$dirhash"|grep -E "`echo -e "\t"`"'h[0-9a-f]+'"`echo -e "\t"`"|sed -r 's/^.*\th([0-9a-f]+)\t.*$/\1/'
done)|sort|uniq
}

function all-files-referenced {
all-nodes-referenced|
(while IFS="" read a_afr; do
echo `hash-to-filename "$a_afr"`
done)|sort
}

function missing-nodes {
diff <(all-nodes-referenced) <(nodes-existing)|grep -E '^<'|sed -r 's/^< //'
}

function files-for-gc {
diff <(files-existing) <(all-files-referenced)|grep -E '^<'|sed -r 's/^< //'
}

function check-sum-errors {
nodes-existing|
(while IFS="" read hash_cse; do
checksum="`hash-to-content "$hash_cse"|hashsum`"
if [ ! "$checksum" == "$hash_cse" ]; then echo "$hash_cse $checksum";fi
done)
}

function check-sum {
check-sum-errors|sed -r 's/^(.*)\ (.*)$/Node \1 has unmatching checksum \2/'
}

function all-nodes-integrity {
if [ "`grep -Ecv '_[0-9]{12}_[0-9a-f]{40}$' "$list"`" -gt 0 ]; then echo "list is corrupt"
else
cat "$list"|
(while read aa; do
a="`echo "$aa"|sed -r 's/^.*_([0-9a-f]+)$/\1/'`"
if [ "`hash-to-content "$a"|grep -Ecv '^[scd]|^d[0-9]{12}|^c[0-9a-f]+$|^s.*: [0-9]+$'`" -gt 0 ];
then echo "snapshot $aa is corrupt"
else
sscont="`hash-to-content "$a"|grep -E '^c'|sed -r 's/^.//'`"
if [ "`hash-to-content "$sscont"|grep -Ec '^[^dl-]|^[dl].*	[^spogman]|^-.*	[^spogmanh]'`" -gt 0 ]; then echo "file list in snapshot $aa is corrupt"; fi
fi;done)
fi
}

function integrity {
itf="`tmpfile`"
echog "Checking repository integrity..." >&2
(
echog "   Checking format integrity..." >&2
all-nodes-integrity
echog "   Computing checksums..." >&2
check-sum
echog "   Looking for missing nodes..." >&2
missing-nodes|sed -r 's/^(.*)$/Node \1 is missing/'
)|tee "$itf"
if [ "`grep -c "" "$itf"`" -eq "0" ];
then echog "No corruption detected" >&2
return 0
else return 1
fi
rm "$itf"
}

function gc {
tf_gc="`tmpfile`"
echog "Computing cleanup..."
files-for-gc>"$tf_gc"
if [ "`grep -c "" "$tf_gc"`" -eq "0" ];
then echog "No files to delete"
else
if [ "$1" == "listonly" ]
then echog "The following files can be deleted:"; cat "$tf_gc"
else echog "Marking files for deletion..."
     cat "$tf_gc"|(while IFS="" read a; do
     echo mv "$a" "$a".delete; mv "$a" "$a".delete ;done)
     if integrity
     then echog "Deleting files..."
         cat "$tf_gc"|(while IFS="" read a; do
         echo rm "$a".delete; rm "$a".delete ;done)
     else echor "Corruption detected, unmarking all files..."
         cat "$tf_gc"|(while IFS="" read a; do
         echo mv "$a".delete "$a"; mv "$a".delete "$a" ;done)
         echor "You might want to check the repository integrity"
     fi
fi
fi
rm "$tf_gc"
}

function gc-list {
gc listonly
}

function file-part {
let hl="$3"-"$2"
if [ "$hl" -lt 1028 ]
then
tf_fp="`tmpfile`"
dd if="$1" of="$tf_fp" bs=1 count="$hl" skip="$2" 2>/dev/null
cat "$tf_fp"
rm "$tf_fp"
else

let tsp="$2"/1024*1024
if [ ! "$tsp" -eq "$2" ]
then let tsp="$tsp"+1024
     (file-part "$1" "$2" "$tsp")
     (file-part "$1" "$tsp" "$3")
else

let tep="$3"/1024*1024
if [ ! "$tep" -eq "$3" ]
then (file-part "$1" "$2" "$tep")
     (file-part "$1" "$tep" "$3")
else

let tsp="$2"/1024
let tep="$3"/1024
let hl="$tep"-"$tsp"
tf_fp="`tmpfile`"
dd if="$1" of="$tf_fp" bs=1024 count="$hl" skip="$tsp" 2>/dev/null
cat "$tf_fp"
rm "$tf_fp"
fi;fi;fi
}

function hash-from-file-part {
file-part "$1" "$2" "$3"|hashsum
}

function common-prefixl-of {
f1="$1"
f2="$2"
ep="`file-size "$f1"`"
l2="`file-size "$f2"`"
if [ "$l2" -lt "$ep" ]; then ep="$l2";fi
bp="0"
while [ "$bp" -lt "$ep" ]; do
let np=("$ep"-"$bp")/2+"$bp"
if [ "$np" == "$bp" ]; then nbp="$ep"; else nbp="$np";fi
if [ "`hash-from-file-part "$f1" "$bp" "$nbp"`" == "`hash-from-file-part "$f2" "$bp" "$nbp"`" ]; then bp="$nbp"; else ep="$np";fi
done
echo "$bp"
}

function dedup-prefix {
cf1="`tmpfile`";hash-to-content "$1" > "$cf1"
cf2="`tmpfile`";hash-to-content "$2" > "$cf2"
cpl="`common-prefixl-of "$cf1" "$cf2"`"
nf1="`tmpfile`";file-part "$cf1" 0 "$cpl" > "$nf1"
nf2="`tmpfile`";file-part "$cf1" "$cpl" "`file-size "$cf1"`" > "$nf2"
nf3="`tmpfile`";file-part "$cf2" "$cpl" "`file-size "$cf2"`" > "$nf3"
make-cat "$nf1" "$nf2"
make-cat "$nf1" "$nf3"
rm "$cf1" "$cf2" "$nf1" "$nf2" "$nf3"
}

function make-cat {
if [ "`file-size "$1"`" -eq 0 -o "`file-size "$2"`" -eq 0 ]; then return;fi
#fixme: optimize to read only once
nch="`cat "$1" "$2"|hashsum`"
ncf="$repo/`echo "$nch"|sed -r 's/^(..)/\1\//'`.cat"
(cat "$1"|content-to-hash;cat "$2"|content-to-hash)>"$ncf" 2>/dev/null
echo "$nch"
cat "$ncf"
echog "Substituting $nch for the concatenation of" >&2
cat "$ncf"|sed -r 's/^/     /' >&2
echo "     (`file-size "$1"` and `file-size "$2"` bytes respectively)" >&2
}

function update-prefix-index {
while IFS="" read h_upi; do
if [ "`hash-to-filename "$h_upi"|grep -Ec '\.cat$'`" == "1" ]
then tf_upi="`tmpfile`"
     cat "$1"|grep -Fv " $h_upi">"$tf_upi"
     mv "$tf_upi" "$1"
else
prefh_tf1="`tmpfile`"
hash-to-content "$h_upi" > "$prefh_tf1"
if [ "`file-size "$prefh_tf1"`" -gt "$prefixl" ]; then
prefh_tf2="`tmpfile`"
dd count=1 bs=$prefixl if="$prefh_tf1" of="$prefh_tf2" 2>/dev/null
prefh="`cat "$prefh_tf2"|hashsum`"
rm "$prefh_tf2"
echo "$prefh $h_upi" >> "$1"
fi
rm "$prefh_tf1"
fi
done
tf_upi="`tmpfile`";cat "$1"|sort|uniq>"$tf_upi";mv "$tf_upi" "$1"
}

function deduplicate {
echog "Deduplicating file prefixes (minimum length $prefixl bytes)..."
dtf="`tmpfile`";dtf2="`tmpfile`"
nodes-existing|update-prefix-index "$dtf"
while [ ! "$dtfh" == "`cat "$dtf"|hashsum`" ]; do
dtfh="`cat "$dtf"|hashsum`"
cp "$dtf" "$dtf2"
dih2="";dip2="";cat "$dtf2"|(while read dip dih; do
if [ "$dip" == "$dip2" ]; then
dedup-prefix "$dih" "$dih2"
dip2="nothing"
else
dih2="$dih";dip2="$dip"
fi
done)|update-prefix-index "$dtf"
done
rm "$dtf" "$dtf2"
echog "Compiling concatenation files..."
cat-compile
echog "Done. You might want to perform a garbage collect now."
}

function cat-compile {
#backup .cat-files and check integrity before finishing.
ctf="`tmpfile`"
ctfn="`tmpfile`"
ls -1A "$repo"|grep -E '^[0-9a-f]{2}$'|(while IFS="" read a; do ls -1A "$repo/$a"|(while IFS="" read b; do echo "$repo/$a/$b"; done);done)|grep -E '\.cat$'|sort|uniq>"$ctf"
while [ "`file-size "$ctf"`" -gt "0" ]; do
cat "$ctf"|(while IFS="" read a_cc; do cat-compile-file "$a_cc"; done)>"$ctfn"
mv "$ctfn" "$ctf"
done
rm "$ctf"
}

function cat-compile-file {
f="$1"
tf_ccf="`tmpfile`"
cat "$f"|(while IFS="" read a_ccf; do
path="`hash-to-filename "$a_ccf"`"
if [ "`echo "$path"|grep -Ec '\.cat$'`" == "1" ]
then cat "$path"
else echo "$a_ccf"
fi; done)>"$tf_ccf"
if [ ! "`cat "$tf_ccf"|hashsum`" == "`cat "$f"|hashsum`" ]
then echo "$1"; mv "$tf_ccf" "$f"
else rm "$tf_ccf"
fi
}

function usagehelp {
cat <<EOF

Usage:
`if [ ! "$(whoami)" == "root" ]; then echo "sudo "; fi`$0 [options] command parameters

Commands and parameters are:
   save dir        -- save a snapshot of directory dir
   load snap todir -- extract snapshot snap to directory todir
   list [pattern]  -- list the snapshots matching pattern
   stat snap       -- show information about snapshot snap
   deduplicate     -- perform prefix deduplication to use even less diskspace
   gc              -- garbage collect a repository (delete unused files)
   gc-list         -- show what files are not needed
   integrity       -- perform a data integrity check
   help            -- see this help

Options are:
--repo path        -- work on repository in path.
                      the default is [current working directory]/repo
--no-atime         -- do not save or load file access times. This means that
                      the access times of files saved in the repository may
                      change since they are read.
--no-mtime         -- do not save or load file modification time, file owner,
--no-owner            file group or file permissions respectively.
--no-group
--no-perms
--prefixl length   -- when deduplicating, only deduplicate file prefixes that
                      are at least length bytes. default is ${defaultprefixl}.

EOF
}

if [ ! "`whoami`" == "root" ]; then usagehelp; exit; fi

repo="repo"
use_atime=yes
use_mtime=yes
use_owner=yes
use_group=yes
use_perms=yes
defaultprefixl=131072
prefixl=$defaultprefixl
while [ "`echo "$1"|sed -r 's/^(..).*$/\1/'`" == "--" ]; do
 case "$1" in
  "--repo")
   shift
   repo="$1"
   ;;
  "--no-atime")
   use_atime=""
   ;;
  "--no-mtime")
   use_mtime=""
   ;;
  "--no-owner")
   use_owner=""
   ;;
  "--no-group")
   use_group=""
   ;;
  "--no-perms")
   use_perms=""
   ;;
  "--prefixl")
   shift
   if [ "$1" -gt 0 ]; then prefixl="$1";fi
   ;;
  *)
   echo "Unrecongnized option: $1"
   exit
 esac
shift
done
list="$repo"/list

cmd_main="$1"
shift
case "$cmd_main" in
 "save")
  if [ ! -d "$1" ]; then echo "Directory does not exist"; exit; fi
  save-dir "$1"
  ;;
 "load")
  if [ ! -d "$2" ]; then echo "Target directory does not exist"; exit; fi
  load-dir "$1" "$2"
  ;;
 "list")
  list-dir "$1"
  ;;
 "stat")
  get-commit-stat "$1"
  ;;
 deduplicate|gc|gc-list|integrity)
  $cmd_main
  ;;
#debugging
 "do")
  $1
  ;;
 "help"|"")
  usagehelp
  ;;
 *)
  echo "Unknown command $cmd_main"
esac
